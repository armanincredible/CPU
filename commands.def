
DEF_CMD(0, HLT, 0, break;)

DEF_CMD(1, PUSH, 1,
        elem_t value = inm_value;
        if (bit_field.reg == 1)
        {
                value += proc->Regs[reg_value];
        }
        if (bit_field.ram == 1)
        {
                stack_push (stack, proc->Ram [value / FACTOR]);
        }
        else 
        {
                stack_push (stack, value);
        })

DEF_CMD(2, POP, 1,
        elem_t value = inm_value;
        elem_t stack_value = 0;
        if (bit_field.reg == 1)
        {
                value += proc->Regs[reg_value];
        }
        if (bit_field.ram == 1)
        {
                stack_pop (stack, &stack_value);
                proc->Ram [value / FACTOR] = stack_value;
        }
        else
        {
                stack_pop (stack, &stack_value);
                proc->Regs[reg_value] = stack_value;
        }
        )

DEF_CMD(3, ADD, 0,
        elem_t fr_var = 0;
        elem_t sec_var = 0;
        stack_pop (stack, &fr_var);
        stack_pop (stack, &sec_var);

        stack_push (stack, fr_var + sec_var);
        )

DEF_CMD(4, SUB, 0,
        elem_t fr_var = 0;
        elem_t sec_var = 0;
        stack_pop (stack, &fr_var);
        stack_pop (stack, &sec_var);

        stack_push (stack, fr_var - sec_var);
        )

DEF_CMD(5, MUL, 0,
        elem_t fr_var = 0;
        elem_t sec_var = 0;
        stack_pop (stack, &fr_var);
        stack_pop (stack, &sec_var);

        stack_push (stack, (int) ((fr_var * sec_var) / FACTOR));
        )

DEF_CMD(6, DIV, 0,
        elem_t fr_var = 0;
        elem_t sec_var = 0;
        stack_pop (stack, &fr_var);
        stack_pop (stack, &sec_var);

        stack_push (stack, (int) ((fr_var / sec_var) * FACTOR)); 
        )

DEF_CMD(7, OUT, 0,
        printf ("%lf\n", (double(stack_top (stack))) / FACTOR);
        )

DEF_CMD(8, IN, 0,
        elem_t input_value = 0;
        double value_dbl = 0;
        printf ("WRITE VALUE : ");
        scanf ("%lf", &value_dbl);
        input_value = value_dbl * FACTOR;
        stack_push (stack, input_value);
        )

DEF_CMD(9, JA, 1,
        elem_t fr_var = 0;
        elem_t sec_var = 0;
        stack_pop (stack, &fr_var);
        stack_pop (stack, &sec_var);
        if (fr_var > sec_var)
        {
                proc->Ip = inm_value;
        }
        )

DEF_CMD(10, JAL, 1,
        elem_t fr_var = 0;
        elem_t sec_var = 0;
        stack_pop (stack, &fr_var);
        stack_pop (stack, &sec_var);
        if (fr_var >= sec_var)
        {
                proc->Ip = inm_value;
        }
        )

DEF_CMD(11, JB, 1,
        elem_t fr_var = 0;
        elem_t sec_var = 0;
        stack_pop (stack, &fr_var);
        stack_pop (stack, &sec_var);
        if (fr_var < sec_var)
        {
                proc->Ip = inm_value;
        }
        )

DEF_CMD(12, JBL, 1,
        elem_t fr_var = 0;
        elem_t sec_var = 0;
        stack_pop (stack, &fr_var);
        stack_pop (stack, &sec_var);
        if (fr_var <= sec_var)
        {
                proc->Ip = inm_value;
        }
        )

DEF_CMD(13, JE, 1,
        elem_t fr_var = 0;
        elem_t sec_var = 0;
        stack_pop (stack, &fr_var);
        stack_pop (stack, &sec_var);
        if (fr_var == sec_var)
        {
                proc->Ip = inm_value;
        }
        )

DEF_CMD(14, JNE, 1,
        elem_t fr_var = 0;
        elem_t sec_var = 0;
        stack_pop (stack, &fr_var);
        stack_pop (stack, &sec_var);
        if (fr_var != sec_var)
        {
                proc->Ip = inm_value;
        }
        )

DEF_CMD(15, JMP, 1,
        proc->Ip = inm_value;
        )

DEF_CMD(16, CALL, 1,
        stack_push (rtr_stack, proc->Ip);
        proc->Ip = inm_value;
        )

DEF_CMD(17, RET, 0,
        elem_t ip_save = 0;
        stack_pop (rtr_stack, &ip_save);
        proc->Ip = ip_save;
        )

DEF_CMD(18, SQRT, 0,
        elem_t fr_var = 0;
        stack_pop (stack, &fr_var);
        fr_var = (int) sqrt (fr_var);
        stack_push (stack, ((int)sqrt (FACTOR)) * fr_var);
        )

DEF_CMD(19, DRAW, 0, 
        for (int ip_syc = 0; ip_syc < SIZE_RAM - 1; ip_syc++)
        {
                if (ip_syc == 80)
                {
                        printf ("\n");
                }
                bits = *((BITS*)(proc->Ram + ip_syc));
                for (int am = 0; am < 2; am++)
                {
                        if (bits.fr == 1)
                        {
                                printf ("*");
                        }
                        else 
                        {
                                printf (".");
                        }
                        if (bits.sec == 1)
                        {
                                printf ("*");
                        }
                        else 
                        {
                                printf (".");
                        }
                        
                }
        }
        )